// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	record "playlist-saver/model/record"

	mock "github.com/stretchr/testify/mock"
)

// StatusRepository is an autogenerated mock type for the StatusRepository type
type StatusRepository struct {
	mock.Mock
}

// GetAllStatus provides a mock function with given fields: ctx
func (_m *StatusRepository) GetAllStatus(ctx context.Context) ([]record.Status, error) {
	ret := _m.Called(ctx)

	var r0 []record.Status
	if rf, ok := ret.Get(0).(func(context.Context) []record.Status); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]record.Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPremiumStatus provides a mock function with given fields: ctx
func (_m *StatusRepository) GetPremiumStatus(ctx context.Context) ([]record.Status, error) {
	ret := _m.Called(ctx)

	var r0 []record.Status
	if rf, ok := ret.Get(0).(func(context.Context) []record.Status); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]record.Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatusByUserId provides a mock function with given fields: ctx, userid
func (_m *StatusRepository) GetStatusByUserId(ctx context.Context, userid int) record.Status {
	ret := _m.Called(ctx, userid)

	var r0 record.Status
	if rf, ok := ret.Get(0).(func(context.Context, int) record.Status); ok {
		r0 = rf(ctx, userid)
	} else {
		r0 = ret.Get(0).(record.Status)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: ctx, userId
func (_m *StatusRepository) UpdateStatus(ctx context.Context, userId int) error {
	ret := _m.Called(ctx, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
